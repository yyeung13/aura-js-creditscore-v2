box: node:6.10
build:
  steps:
    # Run 'npm install'
    - script:
        name: A step that executes `npm install` command
        code: npm install  

push-image-to-wcr:
  steps:
    # Push docker image to your docker container registry repo i.e. wercker container releases (wcr or just CR)
    - internal/docker-push:
        repository: wcr.io/$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        cmd: node /pipeline/source/app.js

deploy-app-to-oce:
  steps:
    - bash-template
    
    - script:
      name: Install istioctl
      code: |
        pwd
        echo "Installing istioctl"
        curl -L --compressed https://github.com/istio/istio/releases/download/0.2.7/istio-0.2.7-linux.tar.gz | tar -xz -C $PWD && export PATH=${PWD}/istio-0.2.7/bin:$PATH
        pwd
        
    - script:
      name: Check istioctl version
      code: |
        echo "Checking istioctl version"
        istioctl version
        
    # Wercker kubectl step currently doesn't support embedded istioctl commands like manual side car injection
    # Hence as a *workaround*, in this step we generate and save your kubeconfig for embedded istioctl to work
    - script:
      name: generate and save kubeconfig
      code: |
        mkdir -p /root/.kube
        echo "
        apiVersion: v1
        clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${KUBERNETES_MASTER}
            name: cluster-${KUBERNETES_CLUSTER_ID}
        contexts:
          - context:
              cluster: cluster-${KUBERNETES_CLUSTER_ID}
              user: user-${KUBERNETES_CLUSTER_ID}
            name: context-${KUBERNETES_CLUSTER_ID}
        current-context: context-${KUBERNETES_CLUSTER_ID}
        kind: ""
        users:
          - name: user-${KUBERNETES_CLUSTER_ID}
            user:
              token: ${KUBERNETES_TOKEN}
        " > /root/.kube/config
        
    - script:
        name: "Visualise Kubernetes deployment"
        code: cat kubernetes-deployment.yml
    
    - kubectl:
        name: delete wcr secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret wrelease --ignore-not-found
        
    - kubectl:
        name: create wcr secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=abc@gmail.com
        
# Deploy the app with istio side car injection (manual)
#    - kubectl:
#        name: create deplyoment
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: apply -f <(istioctl kube-inject -f kubernetes-deployment.yml)

# This step prints the traffic routing rules, if any
    - script:
      name: Print traffic routing rules, if any, with istioctl
      code: |
        echo "Print traffic routing rules, if any, with istioctl"
        istioctl get routerule
#
# Use the following steps to add, replace or delete the canary deploy rule to route traffic to v1/v2
#
# Uncomment and use the "add" step to add a rule for the first time. After that comment the "add" step
    - script:
      name: Add traffic route rule with istioctl
      code: |
        echo "Add traffic route rule with istioctl"
        istioctl create -f route-rules.yaml
        echo "Check if the rule has been set correctly"
        istioctl get routerule route-rules -o yaml
#
# Uncomment and use the "replace" step to update the route rule when you change it
#    - script:
#      name: Replace traffic route rule with istioctl
#      code: |
#        echo "Replace traffic route rule with istioctl"
#        istioctl replace -f route-rules.yaml
#        echo "Check if the rule has been set correctly"
#        istioctl get routerule route-rules -o yaml
#
# Uncomment and use the "delete" step to delete the route rule, when not needed. After that comment the "delete" step
#    - script:
#      name: Delete traffic routing rule with istioctl
#      code: |
#        echo "Delete traffic routing rule with istioctl"
#        istioctl delete -f route-rules.yaml
#        echo "Print traffic routing rules, if any, with istioctl"
#        istioctl get routerule

    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces

